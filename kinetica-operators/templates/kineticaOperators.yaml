
{{- $values := .Values -}}
{{- $template := .Template }}
{{- $chart := .Chart -}}
{{- $release := .Release -}}
{{- $files := .Files }}
{{- $capabilities := .Capabilities -}}
{{- $global := .Values.global }}
{{- if ne (kindOf $global) "map" }}
  {{- $global = dict "namespace"  .Release.Namespace }}  
{{- end}}

{{- /* validate common values  environment and providers */ -}}
{{- $allowedEnvironments := list "onPrem" "saas" "offer" }}
{{- $allowedOnPremProviders := list "kind" "eks" "aks" "okd"  }}
{{- $allowedSaasEnvironments := list "eks"  }}
{{- $allowedMarketPlaceEnvironments := list "aks" "eks" }}
{{- $defaultStorageClass := "standard" }}
{{- $defaultStorageProvisioner := "rancher.io/local-path" }}
{{- $defaultWbOperatorEnvironment := "local" }}
{{- $defaultDbOperatorEnvironment := "local" }}


{{- if not (has $values.environment $allowedEnvironments) }}
  {{- fail (printf "%s - %s - %s - " "Not an allowed environment" $values.environment "Allowed are " ($allowedEnvironments  | join "/")) }}
{{- end }}

{{- if eq $values.environment "onPrem"}}
  {{- if not (has $values.provider $allowedOnPremProviders) }}
    {{- fail (printf "%s - %s - %s - " "Not an allowed provider" $values.provider "Allowed are " ($allowedOnPremProviders|join "/")) }}
  {{- end }}  
{{- end}}

{{- if eq $values.environment "saas"}}
  {{- if not (has $values.provider $allowedSaasEnvironments) }}
    {{- fail (printf "%s - %s - %s - " "Not an allowed provider" $values.provider "Allowed are " ($allowedSaasEnvironments|join "/")) }}
  {{- end }}  
  {{- $defaultDbOperatorEnvironment = "saas-eks" }}
{{- end}}

{{- if eq $values.environment "marketPlace"}}
  {{- if not (has $values.provider $allowedMarketPlaceEnvironments) }}
    {{- fail (printf "%s - %s - %s - " "Not an allowed provider" $values.provider "Allowed are " ($allowedMarketPlaceEnvironments|join "/")) }}
  {{- end }}
  {{- if eq $values.provider "aks" }}
    {{- $defaultDbOperatorEnvironment = $values.provider }}
    {{- $defaultWbOperatorEnvironment = $values.provider }}
  {{- end }}
  {{- if eq $values.provider "eks" }}
   {{- $defaultDbOperatorEnvironment = $values.provider }}
  {{- end }}
{{- end}}

{{- if eq $values.provider "aks" }}
    {{- $defaultStorageClass = "managed-premium" }}
    {{- $defaultStorageProvisioner = "disk.csi.azure.com" }}
{{- end }}
{{- if eq $values.provider "eks" }}
    {{- $defaultStorageClass = "gp2" }}
    {{- $defaultStorageProvisioner = "kubernetes.io/aws-ebs" }}
{{- end }}

{{- /* default storage configurations */ -}}
{{- $values = merge (dict "defaultStorageClassComputed" $defaultStorageClass) $values }}
{{- $values = merge (dict "defaultStorageProvisionerComputed" $defaultStorageProvisioner) $values }}
{{- $values = merge (dict "defaultReclaimPolicyComputed" "Delete") $values }}
{{- $values = merge (dict "defaultVolumeBindingModeComputed" "WaitForFirstConsumer") $values }}

{{- $dbOperator := $values.dbOperator }}
{{- $wbOperator := $values.wbOperator }}

{{- /* validate dbOperator values */ -}}
{{- if not (eq (kindOf $dbOperator) "map")}}
  {{- fail "No Configuration found for .Values.dbOperator" }}
{{- end }}
{{- if not $dbOperator.storageClass }}
  {{- $dbOperator = merge (dict "storageClass" dict) $dbOperator }}
{{- end }}
{{- $dbOperatorStorageClass := $dbOperator.storageClass }}
{{- if not $dbOperator.storageClass.cache }}
  {{- $dbOperatorStorageClass  = merge (dict "cache" dict) $dbOperatorStorageClass }}
{{- end }}
{{- if not $dbOperator.storageClass.persist }}
  {{- $dbOperatorStorageClass  = merge (dict "persist" dict) $dbOperatorStorageClass }}
{{- end }}
{{- if not $dbOperator.storageClass.procs}}
  {{- $dbOperatorStorageClass  = merge (dict "procs" dict) $dbOperatorStorageClass }}
{{- end }}
{{- $dbOperator = merge (dict "storageClass" $dbOperatorStorageClass) $dbOperator }}
{{- /* we need a minimum of container image references */ -}}
{{- if $dbOperator.install }}
  {{- $dbOperatorParameters := $dbOperator.parameters }}
  {{- if not (eq (kindOf $dbOperatorParameters) "map")}}
    {{- $dbOperatorParameters = dict }}
  {{- end }}
  {{- $dbOperatorParameters = merge (dict "environmentComputed" $defaultDbOperatorEnvironment) $dbOperatorParameters}}
  {{- $dbOperator = merge (dict "parameters" $dbOperatorParameters) $dbOperator}}
{{- end }}

{{- /* validate wbOperator values */ -}}
{{- if not (eq (kindOf $wbOperator) "map")}}
  {{- fail "No Configuration found for .Values.wbOperator" }}
{{- end }}
{{- if not $wbOperator.storageClass }}
  {{- $wbOperator = merge (dict "storageClass" (dict "persist" (dict "provisioner" dict)) ) $wbOperator }}
{{- end }}
{{- if $wbOperator.install }}
  {{- $wbOperatorParameters := $wbOperator.parameters }}
  {{- if not (eq (kindOf $wbOperatorParameters) "map")}}
    {{- $wbOperatorParameters = dict }}
  {{- end }}
  {{- $wbOperatorParameters = merge (dict "environmentComputed" $defaultWbOperatorEnvironment) $wbOperatorParameters}}
  {{- $wbOperator = merge (dict "parameters" $wbOperatorParameters) $wbOperator}}
{{- end}}

{{- /* default dbOperator values */ -}}
{{- if not $dbOperator.namespace }}
  {{- $dbOperator = merge (dict "namespace" $global.namespace) $dbOperator }}
{{- end }}  

{{- if or (ne (kindOf $dbOperator.image) "map") (not $dbOperator.image.repository) }}
  {{- $dbOperator = merge (dict "image" (dict "repository" "docker.io/kineticadevcloud/kinetica-k8s-operator")) $dbOperator }}
{{- end }}

{{- if eq (kindOf .Chart.Dependencies) "slice" }}
  {{- range .Chart.Dependencies }}
    {{-  if eq .Name "porter-agent" }}
      {{-  $dbOperator = merge (dict "installVersion" .Version) $dbOperator }}
      {{-   $wbOperator = merge (dict "installVersion" .Version) $wbOperator }}
    {{- end }}
  {{- end }}
{{-  end }}



{{- /* default wbOperator values */ -}}
{{- if not $wbOperator.namespace }}
  {{- $wbOperator = merge (dict "namespace" $global.namespace) $wbOperator }}
{{- end }}
{{- if or (ne (kindOf $wbOperator.image) "map") (not $wbOperator.image.repository) }}
  {{- $wbOperator = merge (dict "image" (dict "repository" "docker.io/kineticadevcloud/workbench-operator")) $wbOperator }}
{{- end }}

{{- /* create the final values */ -}}
{{- $values = merge (dict "global" $global) $values}}
  
{{- $values = merge (dict "dbOperator" $dbOperator) (dict "wbOperator" $wbOperator) $values}}
{{- $data := merge (dict "Files" $files) (dict "Values" $values) (dict "Capabilities" $capabilities) (dict "Chart" $chart) (dict "Release" $release) (dict "Template" $template)}}
---


{{- if $dbOperator.install }}
  {{- include "kinetica-operators.dbOperatorInstallation" $data }}
---
{{- end }}

{{- if $wbOperator.install }}
  {{- include "kinetica-operators.wbOperatorInstallation" $data }}
---
{{- end}}
---
{{- include "kinetica-operators.cacheStorageClass" $data }}
---
{{- include "kinetica-operators.dbPersistStorageClass" $data }}
---
{{- include "kinetica-operators.dbProcsStorageClass" $data }}
---
{{- include "kinetica-operators.wbPersistStorageClass" $data }}
---