# ###################################################################
# workbench.yaml
#
# Workbench is the Schema for the workbenches API
#
# Generated by oas2helm at 2025-08-21 16:53:55
# ###################################################################

apiVersion: workbench.com.kinetica/v1
kind: Workbench
metadata:
  name: {{ .Values.name | default "workbench" | quote }}
  {{- if eq (kindOf .Values.namespace) "string" }}
  namespace: {{ .Values.namespace }}
  {{- else }}
  namespace: {{ .Release.Namespace }}
  {{- end }}
spec:

    # Section: affinity
    # Required: false
    # Description: Affinity is a group of affinity scheduling rules.
    # Type: object
    {{- if eq (kindOf .Values.affinity) "map" }}
    affinity: 

      # Section: nodeAffinity
      # Required: false
      # Description: Describes node affinity scheduling rules for the pod.
      # Type: object
      {{- if eq (kindOf .Values.affinity.nodeAffinity) "map" }}
      nodeAffinity: 

        # Section: preferredDuringSchedulingIgnoredDuringExecution
        # Required: false
        # Description: The scheduler will prefer to schedule pods to nodes that satisfy
        # the affinity expressions specified by this field, but it may choose
        # a node that violates one or more of the expressions. The node that is
        # most preferred is the one with the greatest sum of weights, i.e.
        # for each node that meets all of the scheduling requirements (resource
        # request, requiredDuringScheduling affinity expressions, etc.),
        # compute a sum by iterating through the elements of this field and adding
        # "weight" to the sum if the node matches the corresponding matchExpressions; the
        # node(s) with the highest sum are the most preferred.
        # Type: array of object
        {{- if eq (kindOf .Values.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution) "array" }}
        preferredDuringSchedulingIgnoredDuringExecution:
        {{- range $v := .Values.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution }}
        - 
          # Section: preference
          # Required: true
          # Description: A node selector term, associated with the corresponding weight.
          # Type: object
          {{- if eq (kindOf $v.preference) "map" }}
          preference: 

            # Section: matchExpressions
            # Required: false
            # Description: A list of node selector requirements by node's labels.
            # Type: array of object
            {{- if eq (kindOf $v.preference.matchExpressions) "array" }}
            matchExpressions:
            {{- range $v := $v.preference.matchExpressions }}
            - 
              # Section: key
              # Required: true
              # Description: The label key that the selector applies to.
              # Type: string
              key: {{ required "A valid $v.key entry required!" $v.key | quote }}

              # Section: operator
              # Required: true
              # Description: Represents a key's relationship to a set of values.
              # Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
              # Type: string
              operator: {{ required "A valid $v.operator entry required!" $v.operator | quote }}

              # Section: values
              # Required: false
              # Description: An array of string values. If the operator is In or NotIn,
              # the values array must be non-empty. If the operator is Exists or DoesNotExist,
              # the values array must be empty. If the operator is Gt or Lt, the values
              # array must have a single element, which will be interpreted as an integer.
              # This array is replaced during a strategic merge patch.
              # Type: array of string
              values: {{ $v.values }}
            {{- end }}
            {{- end }}

            # Section: matchFields
            # Required: false
            # Description: A list of node selector requirements by node's fields.
            # Type: array of object
            {{- if eq (kindOf $v.preference.matchFields) "array" }}
            matchFields:
            {{- range $v := $v.preference.matchFields }}
            - 
              # Section: key
              # Required: true
              # Description: The label key that the selector applies to.
              # Type: string
              key: {{ required "A valid $v.key entry required!" $v.key | quote }}

              # Section: operator
              # Required: true
              # Description: Represents a key's relationship to a set of values.
              # Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
              # Type: string
              operator: {{ required "A valid $v.operator entry required!" $v.operator | quote }}

              # Section: values
              # Required: false
              # Description: An array of string values. If the operator is In or NotIn,
              # the values array must be non-empty. If the operator is Exists or DoesNotExist,
              # the values array must be empty. If the operator is Gt or Lt, the values
              # array must have a single element, which will be interpreted as an integer.
              # This array is replaced during a strategic merge patch.
              # Type: array of string
              values: {{ $v.values }}
            {{- end }}
            {{- end }}
          {{- end }}

          # Section: weight
          # Required: true
          # Description: Weight associated with matching the corresponding nodeSelectorTerm,
          # in the range 1-100.
          # Type: integer
          # Format: int32
          weight: {{ required "A valid $v.weight entry required!" $v.weight }}
        {{- end }}
        {{- end }}

        # Section: requiredDuringSchedulingIgnoredDuringExecution
        # Required: false
        # Description: If the affinity requirements specified by this field are not met at
        # scheduling time, the pod will not be scheduled onto the node.
        # If the affinity requirements specified by this field cease to be met
        # at some point during pod execution (e.g. due to an update), the system
        # may or may not try to eventually evict the pod from its node.
        # Type: object
        {{- if eq (kindOf .Values.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution) "map" }}
        requiredDuringSchedulingIgnoredDuringExecution: 

          # Section: nodeSelectorTerms
          # Required: true
          # Description: Required. A list of node selector terms. The terms are ORed.
          # Type: array of object
          nodeSelectorTerms:
          {{- range $v := .Values.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms }}
          - 
            # Section: matchExpressions
            # Required: false
            # Description: A list of node selector requirements by node's labels.
            # Type: array of object
            {{- if eq (kindOf $v.matchExpressions) "array" }}
            matchExpressions:
            {{- range $v := $v.matchExpressions }}
            - 
              # Section: key
              # Required: true
              # Description: The label key that the selector applies to.
              # Type: string
              key: {{ required "A valid $v.key entry required!" $v.key | quote }}

              # Section: operator
              # Required: true
              # Description: Represents a key's relationship to a set of values.
              # Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
              # Type: string
              operator: {{ required "A valid $v.operator entry required!" $v.operator | quote }}

              # Section: values
              # Required: false
              # Description: An array of string values. If the operator is In or NotIn,
              # the values array must be non-empty. If the operator is Exists or DoesNotExist,
              # the values array must be empty. If the operator is Gt or Lt, the values
              # array must have a single element, which will be interpreted as an integer.
              # This array is replaced during a strategic merge patch.
              # Type: array of string
              values: {{ $v.values }}
            {{- end }}
            {{- end }}

            # Section: matchFields
            # Required: false
            # Description: A list of node selector requirements by node's fields.
            # Type: array of object
            {{- if eq (kindOf $v.matchFields) "array" }}
            matchFields:
            {{- range $v := $v.matchFields }}
            - 
              # Section: key
              # Required: true
              # Description: The label key that the selector applies to.
              # Type: string
              key: {{ required "A valid $v.key entry required!" $v.key | quote }}

              # Section: operator
              # Required: true
              # Description: Represents a key's relationship to a set of values.
              # Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
              # Type: string
              operator: {{ required "A valid $v.operator entry required!" $v.operator | quote }}

              # Section: values
              # Required: false
              # Description: An array of string values. If the operator is In or NotIn,
              # the values array must be non-empty. If the operator is Exists or DoesNotExist,
              # the values array must be empty. If the operator is Gt or Lt, the values
              # array must have a single element, which will be interpreted as an integer.
              # This array is replaced during a strategic merge patch.
              # Type: array of string
              values: {{ $v.values }}
            {{- end }}
            {{- end }}
          {{- end }}
        {{- end }}
      {{- end }}

      # Section: podAffinity
      # Required: false
      # Description: Describes pod affinity scheduling rules (e.g. co-locate this pod in
      # the same node, zone, etc. as some other pod(s)).
      # Type: object
      {{- if eq (kindOf .Values.affinity.podAffinity) "map" }}
      podAffinity: 

        # Section: preferredDuringSchedulingIgnoredDuringExecution
        # Required: false
        # Description: The scheduler will prefer to schedule pods to nodes that satisfy
        # the affinity expressions specified by this field, but it may choose
        # a node that violates one or more of the expressions. The node that is
        # most preferred is the one with the greatest sum of weights, i.e.
        # for each node that meets all of the scheduling requirements (resource
        # request, requiredDuringScheduling affinity expressions, etc.),
        # compute a sum by iterating through the elements of this field and adding
        # "weight" to the sum if the node has pods which matches the corresponding
        # podAffinityTerm; the
        # node(s) with the highest sum are the most preferred.
        # Type: array of object
        {{- if eq (kindOf .Values.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution) "array" }}
        preferredDuringSchedulingIgnoredDuringExecution:
        {{- range $v := .Values.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution }}
        - 
          # Section: podAffinityTerm
          # Required: true
          # Description: Required. A pod affinity term, associated with the corresponding
          # weight.
          # Type: object
          {{- if eq (kindOf $v.podAffinityTerm) "map" }}
          podAffinityTerm: 

            # Section: labelSelector
            # Required: false
            # Description: A label query over a set of resources, in this case pods.
            # If it's null, this PodAffinityTerm matches with no Pods.
            # Type: object
            {{- if eq (kindOf $v.podAffinityTerm.labelSelector) "map" }}
            labelSelector: 

              # Section: matchExpressions
              # Required: false
              # Description: matchExpressions is a list of label selector requirements. The
              # requirements are ANDed.
              # Type: array of object
              {{- if eq (kindOf $v.podAffinityTerm.labelSelector.matchExpressions) "array" }}
              matchExpressions:
              {{- range $v := $v.podAffinityTerm.labelSelector.matchExpressions }}
              - 
                # Section: key
                # Required: true
                # Description: key is the label key that the selector applies to.
                # Type: string
                key: {{ required "A valid $v.key entry required!" $v.key | quote }}

                # Section: operator
                # Required: true
                # Description: operator represents a key's relationship to a set of values.
                # Valid operators are In, NotIn, Exists and DoesNotExist.
                # Type: string
                operator: {{ required "A valid $v.operator entry required!" $v.operator | quote }}

                # Section: values
                # Required: false
                # Description: values is an array of string values. If the operator is In or
                # NotIn,
                # the values array must be non-empty. If the operator is Exists or DoesNotExist,
                # the values array must be empty. This array is replaced during a strategic
                # merge patch.
                # Type: array of string
                values: {{ $v.values }}
              {{- end }}
              {{- end }}

              # Section: matchLabels
              # Required: false
              # Description: matchLabels is a map of {key,value} pairs. A single {key,value} in
              # the matchLabels
              # map is equivalent to an element of matchExpressions, whose key field is "key",
              # the
              # operator is "In", and the values array contains only "value". The requirements
              # are ANDed.
              # Type: object
              {{- if eq (kindOf $v.podAffinityTerm.labelSelector.matchLabels) "map" }}
              # Sub-Type: map[string]string
              {{- if eq (kindOf $v.podAffinityTerm.labelSelector.matchLabels) "map" }}
              matchLabels: {{ toYaml $v.podAffinityTerm.labelSelector.matchLabels | nindent 16 }}
              {{- end }}
              {{- end }}
            {{- end }}

            # Section: matchLabelKeys
            # Required: false
            # Description: MatchLabelKeys is a set of pod label keys to select which pods will
            # be taken into consideration. The keys are used to lookup values from the
            # incoming pod labels, those key-value labels are merged with `labelSelector` as
            # `key in (value)`
            # to select the group of existing pods which pods will be taken into consideration
            # for the incoming pod's pod (anti) affinity. Keys that don't exist in the
            # incoming
            # pod labels will be ignored. The default value is empty.
            # The same key is forbidden to exist in both matchLabelKeys and labelSelector.
            # Also, matchLabelKeys cannot be set when labelSelector isn't set.
            # This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature
            # gate (enabled by default).
            # Type: array of string
            matchLabelKeys: {{ $v.podAffinityTerm.matchLabelKeys }}

            # Section: mismatchLabelKeys
            # Required: false
            # Description: MismatchLabelKeys is a set of pod label keys to select which pods
            # will
            # be taken into consideration. The keys are used to lookup values from the
            # incoming pod labels, those key-value labels are merged with `labelSelector` as
            # `key notin (value)`
            # to select the group of existing pods which pods will be taken into consideration
            # for the incoming pod's pod (anti) affinity. Keys that don't exist in the
            # incoming
            # pod labels will be ignored. The default value is empty.
            # The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
            # Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
            # This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature
            # gate (enabled by default).
            # Type: array of string
            mismatchLabelKeys: {{ $v.podAffinityTerm.mismatchLabelKeys }}

            # Section: namespaceSelector
            # Required: false
            # Description: A label query over the set of namespaces that the term applies to.
            # The term is applied to the union of the namespaces selected by this field
            # and the ones listed in the namespaces field.
            # null selector and null or empty namespaces list means "this pod's namespace".
            # An empty selector ({}) matches all namespaces.
            # Type: object
            {{- if eq (kindOf $v.podAffinityTerm.namespaceSelector) "map" }}
            namespaceSelector: 

              # Section: matchExpressions
              # Required: false
              # Description: matchExpressions is a list of label selector requirements. The
              # requirements are ANDed.
              # Type: array of object
              {{- if eq (kindOf $v.podAffinityTerm.namespaceSelector.matchExpressions) "array" }}
              matchExpressions:
              {{- range $v := $v.podAffinityTerm.namespaceSelector.matchExpressions }}
              - 
                # Section: key
                # Required: true
                # Description: key is the label key that the selector applies to.
                # Type: string
                key: {{ required "A valid $v.key entry required!" $v.key | quote }}

                # Section: operator
                # Required: true
                # Description: operator represents a key's relationship to a set of values.
                # Valid operators are In, NotIn, Exists and DoesNotExist.
                # Type: string
                operator: {{ required "A valid $v.operator entry required!" $v.operator | quote }}

                # Section: values
                # Required: false
                # Description: values is an array of string values. If the operator is In or
                # NotIn,
                # the values array must be non-empty. If the operator is Exists or DoesNotExist,
                # the values array must be empty. This array is replaced during a strategic
                # merge patch.
                # Type: array of string
                values: {{ $v.values }}
              {{- end }}
              {{- end }}

              # Section: matchLabels
              # Required: false
              # Description: matchLabels is a map of {key,value} pairs. A single {key,value} in
              # the matchLabels
              # map is equivalent to an element of matchExpressions, whose key field is "key",
              # the
              # operator is "In", and the values array contains only "value". The requirements
              # are ANDed.
              # Type: object
              {{- if eq (kindOf $v.podAffinityTerm.namespaceSelector.matchLabels) "map" }}
              # Sub-Type: map[string]string
              {{- if eq (kindOf $v.podAffinityTerm.namespaceSelector.matchLabels) "map" }}
              matchLabels: {{ toYaml $v.podAffinityTerm.namespaceSelector.matchLabels | nindent 16 }}
              {{- end }}
              {{- end }}
            {{- end }}

            # Section: namespaces
            # Required: false
            # Description: namespaces specifies a static list of namespace names that the term
            # applies to.
            # The term is applied to the union of the namespaces listed in this field
            # and the ones selected by namespaceSelector.
            # null or empty namespaces list and null namespaceSelector means "this pod's
            # namespace".
            # Type: array of string
            namespaces: {{ $v.podAffinityTerm.namespaces }}

            # Section: topologyKey
            # Required: true
            # Description: This pod should be co-located (affinity) or not co-located
            # (anti-affinity) with the pods matching
            # the labelSelector in the specified namespaces, where co-located is defined as
            # running on a node
            # whose value of the label with key topologyKey matches that of any node on which
            # any of the
            # selected pods is running.
            # Empty topologyKey is not allowed.
            # Type: string
            topologyKey: {{ required "A valid $v.podAffinityTerm.topologyKey entry required!" $v.podAffinityTerm.topologyKey | quote }}
          {{- end }}

          # Section: weight
          # Required: true
          # Description: weight associated with matching the corresponding podAffinityTerm,
          # in the range 1-100.
          # Type: integer
          # Format: int32
          weight: {{ required "A valid $v.weight entry required!" $v.weight }}
        {{- end }}
        {{- end }}

        # Section: requiredDuringSchedulingIgnoredDuringExecution
        # Required: false
        # Description: If the affinity requirements specified by this field are not met at
        # scheduling time, the pod will not be scheduled onto the node.
        # If the affinity requirements specified by this field cease to be met
        # at some point during pod execution (e.g. due to a pod label update), the
        # system may or may not try to eventually evict the pod from its node.
        # When there are multiple elements, the lists of nodes corresponding to each
        # podAffinityTerm are intersected, i.e. all terms must be satisfied.
        # Type: array of object
        {{- if eq (kindOf .Values.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution) "array" }}
        requiredDuringSchedulingIgnoredDuringExecution:
        {{- range $v := .Values.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution }}
        - 
          # Section: labelSelector
          # Required: false
          # Description: A label query over a set of resources, in this case pods.
          # If it's null, this PodAffinityTerm matches with no Pods.
          # Type: object
          {{- if eq (kindOf $v.labelSelector) "map" }}
          labelSelector: 

            # Section: matchExpressions
            # Required: false
            # Description: matchExpressions is a list of label selector requirements. The
            # requirements are ANDed.
            # Type: array of object
            {{- if eq (kindOf $v.labelSelector.matchExpressions) "array" }}
            matchExpressions:
            {{- range $v := $v.labelSelector.matchExpressions }}
            - 
              # Section: key
              # Required: true
              # Description: key is the label key that the selector applies to.
              # Type: string
              key: {{ required "A valid $v.key entry required!" $v.key | quote }}

              # Section: operator
              # Required: true
              # Description: operator represents a key's relationship to a set of values.
              # Valid operators are In, NotIn, Exists and DoesNotExist.
              # Type: string
              operator: {{ required "A valid $v.operator entry required!" $v.operator | quote }}

              # Section: values
              # Required: false
              # Description: values is an array of string values. If the operator is In or
              # NotIn,
              # the values array must be non-empty. If the operator is Exists or DoesNotExist,
              # the values array must be empty. This array is replaced during a strategic
              # merge patch.
              # Type: array of string
              values: {{ $v.values }}
            {{- end }}
            {{- end }}

            # Section: matchLabels
            # Required: false
            # Description: matchLabels is a map of {key,value} pairs. A single {key,value} in
            # the matchLabels
            # map is equivalent to an element of matchExpressions, whose key field is "key",
            # the
            # operator is "In", and the values array contains only "value". The requirements
            # are ANDed.
            # Type: object
            {{- if eq (kindOf $v.labelSelector.matchLabels) "map" }}
            # Sub-Type: map[string]string
            {{- if eq (kindOf $v.labelSelector.matchLabels) "map" }}
            matchLabels: {{ toYaml $v.labelSelector.matchLabels | nindent 14 }}
            {{- end }}
            {{- end }}
          {{- end }}

          # Section: matchLabelKeys
          # Required: false
          # Description: MatchLabelKeys is a set of pod label keys to select which pods will
          # be taken into consideration. The keys are used to lookup values from the
          # incoming pod labels, those key-value labels are merged with `labelSelector` as
          # `key in (value)`
          # to select the group of existing pods which pods will be taken into consideration
          # for the incoming pod's pod (anti) affinity. Keys that don't exist in the
          # incoming
          # pod labels will be ignored. The default value is empty.
          # The same key is forbidden to exist in both matchLabelKeys and labelSelector.
          # Also, matchLabelKeys cannot be set when labelSelector isn't set.
          # This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature
          # gate (enabled by default).
          # Type: array of string
          matchLabelKeys: {{ $v.matchLabelKeys }}

          # Section: mismatchLabelKeys
          # Required: false
          # Description: MismatchLabelKeys is a set of pod label keys to select which pods
          # will
          # be taken into consideration. The keys are used to lookup values from the
          # incoming pod labels, those key-value labels are merged with `labelSelector` as
          # `key notin (value)`
          # to select the group of existing pods which pods will be taken into consideration
          # for the incoming pod's pod (anti) affinity. Keys that don't exist in the
          # incoming
          # pod labels will be ignored. The default value is empty.
          # The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
          # Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
          # This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature
          # gate (enabled by default).
          # Type: array of string
          mismatchLabelKeys: {{ $v.mismatchLabelKeys }}

          # Section: namespaceSelector
          # Required: false
          # Description: A label query over the set of namespaces that the term applies to.
          # The term is applied to the union of the namespaces selected by this field
          # and the ones listed in the namespaces field.
          # null selector and null or empty namespaces list means "this pod's namespace".
          # An empty selector ({}) matches all namespaces.
          # Type: object
          {{- if eq (kindOf $v.namespaceSelector) "map" }}
          namespaceSelector: 

            # Section: matchExpressions
            # Required: false
            # Description: matchExpressions is a list of label selector requirements. The
            # requirements are ANDed.
            # Type: array of object
            {{- if eq (kindOf $v.namespaceSelector.matchExpressions) "array" }}
            matchExpressions:
            {{- range $v := $v.namespaceSelector.matchExpressions }}
            - 
              # Section: key
              # Required: true
              # Description: key is the label key that the selector applies to.
              # Type: string
              key: {{ required "A valid $v.key entry required!" $v.key | quote }}

              # Section: operator
              # Required: true
              # Description: operator represents a key's relationship to a set of values.
              # Valid operators are In, NotIn, Exists and DoesNotExist.
              # Type: string
              operator: {{ required "A valid $v.operator entry required!" $v.operator | quote }}

              # Section: values
              # Required: false
              # Description: values is an array of string values. If the operator is In or
              # NotIn,
              # the values array must be non-empty. If the operator is Exists or DoesNotExist,
              # the values array must be empty. This array is replaced during a strategic
              # merge patch.
              # Type: array of string
              values: {{ $v.values }}
            {{- end }}
            {{- end }}

            # Section: matchLabels
            # Required: false
            # Description: matchLabels is a map of {key,value} pairs. A single {key,value} in
            # the matchLabels
            # map is equivalent to an element of matchExpressions, whose key field is "key",
            # the
            # operator is "In", and the values array contains only "value". The requirements
            # are ANDed.
            # Type: object
            {{- if eq (kindOf $v.namespaceSelector.matchLabels) "map" }}
            # Sub-Type: map[string]string
            {{- if eq (kindOf $v.namespaceSelector.matchLabels) "map" }}
            matchLabels: {{ toYaml $v.namespaceSelector.matchLabels | nindent 14 }}
            {{- end }}
            {{- end }}
          {{- end }}

          # Section: namespaces
          # Required: false
          # Description: namespaces specifies a static list of namespace names that the term
          # applies to.
          # The term is applied to the union of the namespaces listed in this field
          # and the ones selected by namespaceSelector.
          # null or empty namespaces list and null namespaceSelector means "this pod's
          # namespace".
          # Type: array of string
          namespaces: {{ $v.namespaces }}

          # Section: topologyKey
          # Required: true
          # Description: This pod should be co-located (affinity) or not co-located
          # (anti-affinity) with the pods matching
          # the labelSelector in the specified namespaces, where co-located is defined as
          # running on a node
          # whose value of the label with key topologyKey matches that of any node on which
          # any of the
          # selected pods is running.
          # Empty topologyKey is not allowed.
          # Type: string
          topologyKey: {{ required "A valid $v.topologyKey entry required!" $v.topologyKey | quote }}
        {{- end }}
        {{- end }}
      {{- end }}

      # Section: podAntiAffinity
      # Required: false
      # Description: Describes pod anti-affinity scheduling rules (e.g. avoid putting
      # this pod in the same node, zone, etc. as some other pod(s)).
      # Type: object
      {{- if eq (kindOf .Values.affinity.podAntiAffinity) "map" }}
      podAntiAffinity: 

        # Section: preferredDuringSchedulingIgnoredDuringExecution
        # Required: false
        # Description: The scheduler will prefer to schedule pods to nodes that satisfy
        # the anti-affinity expressions specified by this field, but it may choose
        # a node that violates one or more of the expressions. The node that is
        # most preferred is the one with the greatest sum of weights, i.e.
        # for each node that meets all of the scheduling requirements (resource
        # request, requiredDuringScheduling anti-affinity expressions, etc.),
        # compute a sum by iterating through the elements of this field and adding
        # "weight" to the sum if the node has pods which matches the corresponding
        # podAffinityTerm; the
        # node(s) with the highest sum are the most preferred.
        # Type: array of object
        {{- if eq (kindOf .Values.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution) "array" }}
        preferredDuringSchedulingIgnoredDuringExecution:
        {{- range $v := .Values.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution }}
        - 
          # Section: podAffinityTerm
          # Required: true
          # Description: Required. A pod affinity term, associated with the corresponding
          # weight.
          # Type: object
          {{- if eq (kindOf $v.podAffinityTerm) "map" }}
          podAffinityTerm: 

            # Section: labelSelector
            # Required: false
            # Description: A label query over a set of resources, in this case pods.
            # If it's null, this PodAffinityTerm matches with no Pods.
            # Type: object
            {{- if eq (kindOf $v.podAffinityTerm.labelSelector) "map" }}
            labelSelector: 

              # Section: matchExpressions
              # Required: false
              # Description: matchExpressions is a list of label selector requirements. The
              # requirements are ANDed.
              # Type: array of object
              {{- if eq (kindOf $v.podAffinityTerm.labelSelector.matchExpressions) "array" }}
              matchExpressions:
              {{- range $v := $v.podAffinityTerm.labelSelector.matchExpressions }}
              - 
                # Section: key
                # Required: true
                # Description: key is the label key that the selector applies to.
                # Type: string
                key: {{ required "A valid $v.key entry required!" $v.key | quote }}

                # Section: operator
                # Required: true
                # Description: operator represents a key's relationship to a set of values.
                # Valid operators are In, NotIn, Exists and DoesNotExist.
                # Type: string
                operator: {{ required "A valid $v.operator entry required!" $v.operator | quote }}

                # Section: values
                # Required: false
                # Description: values is an array of string values. If the operator is In or
                # NotIn,
                # the values array must be non-empty. If the operator is Exists or DoesNotExist,
                # the values array must be empty. This array is replaced during a strategic
                # merge patch.
                # Type: array of string
                values: {{ $v.values }}
              {{- end }}
              {{- end }}

              # Section: matchLabels
              # Required: false
              # Description: matchLabels is a map of {key,value} pairs. A single {key,value} in
              # the matchLabels
              # map is equivalent to an element of matchExpressions, whose key field is "key",
              # the
              # operator is "In", and the values array contains only "value". The requirements
              # are ANDed.
              # Type: object
              {{- if eq (kindOf $v.podAffinityTerm.labelSelector.matchLabels) "map" }}
              # Sub-Type: map[string]string
              {{- if eq (kindOf $v.podAffinityTerm.labelSelector.matchLabels) "map" }}
              matchLabels: {{ toYaml $v.podAffinityTerm.labelSelector.matchLabels | nindent 16 }}
              {{- end }}
              {{- end }}
            {{- end }}

            # Section: matchLabelKeys
            # Required: false
            # Description: MatchLabelKeys is a set of pod label keys to select which pods will
            # be taken into consideration. The keys are used to lookup values from the
            # incoming pod labels, those key-value labels are merged with `labelSelector` as
            # `key in (value)`
            # to select the group of existing pods which pods will be taken into consideration
            # for the incoming pod's pod (anti) affinity. Keys that don't exist in the
            # incoming
            # pod labels will be ignored. The default value is empty.
            # The same key is forbidden to exist in both matchLabelKeys and labelSelector.
            # Also, matchLabelKeys cannot be set when labelSelector isn't set.
            # This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature
            # gate (enabled by default).
            # Type: array of string
            matchLabelKeys: {{ $v.podAffinityTerm.matchLabelKeys }}

            # Section: mismatchLabelKeys
            # Required: false
            # Description: MismatchLabelKeys is a set of pod label keys to select which pods
            # will
            # be taken into consideration. The keys are used to lookup values from the
            # incoming pod labels, those key-value labels are merged with `labelSelector` as
            # `key notin (value)`
            # to select the group of existing pods which pods will be taken into consideration
            # for the incoming pod's pod (anti) affinity. Keys that don't exist in the
            # incoming
            # pod labels will be ignored. The default value is empty.
            # The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
            # Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
            # This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature
            # gate (enabled by default).
            # Type: array of string
            mismatchLabelKeys: {{ $v.podAffinityTerm.mismatchLabelKeys }}

            # Section: namespaceSelector
            # Required: false
            # Description: A label query over the set of namespaces that the term applies to.
            # The term is applied to the union of the namespaces selected by this field
            # and the ones listed in the namespaces field.
            # null selector and null or empty namespaces list means "this pod's namespace".
            # An empty selector ({}) matches all namespaces.
            # Type: object
            {{- if eq (kindOf $v.podAffinityTerm.namespaceSelector) "map" }}
            namespaceSelector: 

              # Section: matchExpressions
              # Required: false
              # Description: matchExpressions is a list of label selector requirements. The
              # requirements are ANDed.
              # Type: array of object
              {{- if eq (kindOf $v.podAffinityTerm.namespaceSelector.matchExpressions) "array" }}
              matchExpressions:
              {{- range $v := $v.podAffinityTerm.namespaceSelector.matchExpressions }}
              - 
                # Section: key
                # Required: true
                # Description: key is the label key that the selector applies to.
                # Type: string
                key: {{ required "A valid $v.key entry required!" $v.key | quote }}

                # Section: operator
                # Required: true
                # Description: operator represents a key's relationship to a set of values.
                # Valid operators are In, NotIn, Exists and DoesNotExist.
                # Type: string
                operator: {{ required "A valid $v.operator entry required!" $v.operator | quote }}

                # Section: values
                # Required: false
                # Description: values is an array of string values. If the operator is In or
                # NotIn,
                # the values array must be non-empty. If the operator is Exists or DoesNotExist,
                # the values array must be empty. This array is replaced during a strategic
                # merge patch.
                # Type: array of string
                values: {{ $v.values }}
              {{- end }}
              {{- end }}

              # Section: matchLabels
              # Required: false
              # Description: matchLabels is a map of {key,value} pairs. A single {key,value} in
              # the matchLabels
              # map is equivalent to an element of matchExpressions, whose key field is "key",
              # the
              # operator is "In", and the values array contains only "value". The requirements
              # are ANDed.
              # Type: object
              {{- if eq (kindOf $v.podAffinityTerm.namespaceSelector.matchLabels) "map" }}
              # Sub-Type: map[string]string
              {{- if eq (kindOf $v.podAffinityTerm.namespaceSelector.matchLabels) "map" }}
              matchLabels: {{ toYaml $v.podAffinityTerm.namespaceSelector.matchLabels | nindent 16 }}
              {{- end }}
              {{- end }}
            {{- end }}

            # Section: namespaces
            # Required: false
            # Description: namespaces specifies a static list of namespace names that the term
            # applies to.
            # The term is applied to the union of the namespaces listed in this field
            # and the ones selected by namespaceSelector.
            # null or empty namespaces list and null namespaceSelector means "this pod's
            # namespace".
            # Type: array of string
            namespaces: {{ $v.podAffinityTerm.namespaces }}

            # Section: topologyKey
            # Required: true
            # Description: This pod should be co-located (affinity) or not co-located
            # (anti-affinity) with the pods matching
            # the labelSelector in the specified namespaces, where co-located is defined as
            # running on a node
            # whose value of the label with key topologyKey matches that of any node on which
            # any of the
            # selected pods is running.
            # Empty topologyKey is not allowed.
            # Type: string
            topologyKey: {{ required "A valid $v.podAffinityTerm.topologyKey entry required!" $v.podAffinityTerm.topologyKey | quote }}
          {{- end }}

          # Section: weight
          # Required: true
          # Description: weight associated with matching the corresponding podAffinityTerm,
          # in the range 1-100.
          # Type: integer
          # Format: int32
          weight: {{ required "A valid $v.weight entry required!" $v.weight }}
        {{- end }}
        {{- end }}

        # Section: requiredDuringSchedulingIgnoredDuringExecution
        # Required: false
        # Description: If the anti-affinity requirements specified by this field are not
        # met at
        # scheduling time, the pod will not be scheduled onto the node.
        # If the anti-affinity requirements specified by this field cease to be met
        # at some point during pod execution (e.g. due to a pod label update), the
        # system may or may not try to eventually evict the pod from its node.
        # When there are multiple elements, the lists of nodes corresponding to each
        # podAffinityTerm are intersected, i.e. all terms must be satisfied.
        # Type: array of object
        {{- if eq (kindOf .Values.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution) "array" }}
        requiredDuringSchedulingIgnoredDuringExecution:
        {{- range $v := .Values.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution }}
        - 
          # Section: labelSelector
          # Required: false
          # Description: A label query over a set of resources, in this case pods.
          # If it's null, this PodAffinityTerm matches with no Pods.
          # Type: object
          {{- if eq (kindOf $v.labelSelector) "map" }}
          labelSelector: 

            # Section: matchExpressions
            # Required: false
            # Description: matchExpressions is a list of label selector requirements. The
            # requirements are ANDed.
            # Type: array of object
            {{- if eq (kindOf $v.labelSelector.matchExpressions) "array" }}
            matchExpressions:
            {{- range $v := $v.labelSelector.matchExpressions }}
            - 
              # Section: key
              # Required: true
              # Description: key is the label key that the selector applies to.
              # Type: string
              key: {{ required "A valid $v.key entry required!" $v.key | quote }}

              # Section: operator
              # Required: true
              # Description: operator represents a key's relationship to a set of values.
              # Valid operators are In, NotIn, Exists and DoesNotExist.
              # Type: string
              operator: {{ required "A valid $v.operator entry required!" $v.operator | quote }}

              # Section: values
              # Required: false
              # Description: values is an array of string values. If the operator is In or
              # NotIn,
              # the values array must be non-empty. If the operator is Exists or DoesNotExist,
              # the values array must be empty. This array is replaced during a strategic
              # merge patch.
              # Type: array of string
              values: {{ $v.values }}
            {{- end }}
            {{- end }}

            # Section: matchLabels
            # Required: false
            # Description: matchLabels is a map of {key,value} pairs. A single {key,value} in
            # the matchLabels
            # map is equivalent to an element of matchExpressions, whose key field is "key",
            # the
            # operator is "In", and the values array contains only "value". The requirements
            # are ANDed.
            # Type: object
            {{- if eq (kindOf $v.labelSelector.matchLabels) "map" }}
            # Sub-Type: map[string]string
            {{- if eq (kindOf $v.labelSelector.matchLabels) "map" }}
            matchLabels: {{ toYaml $v.labelSelector.matchLabels | nindent 14 }}
            {{- end }}
            {{- end }}
          {{- end }}

          # Section: matchLabelKeys
          # Required: false
          # Description: MatchLabelKeys is a set of pod label keys to select which pods will
          # be taken into consideration. The keys are used to lookup values from the
          # incoming pod labels, those key-value labels are merged with `labelSelector` as
          # `key in (value)`
          # to select the group of existing pods which pods will be taken into consideration
          # for the incoming pod's pod (anti) affinity. Keys that don't exist in the
          # incoming
          # pod labels will be ignored. The default value is empty.
          # The same key is forbidden to exist in both matchLabelKeys and labelSelector.
          # Also, matchLabelKeys cannot be set when labelSelector isn't set.
          # This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature
          # gate (enabled by default).
          # Type: array of string
          matchLabelKeys: {{ $v.matchLabelKeys }}

          # Section: mismatchLabelKeys
          # Required: false
          # Description: MismatchLabelKeys is a set of pod label keys to select which pods
          # will
          # be taken into consideration. The keys are used to lookup values from the
          # incoming pod labels, those key-value labels are merged with `labelSelector` as
          # `key notin (value)`
          # to select the group of existing pods which pods will be taken into consideration
          # for the incoming pod's pod (anti) affinity. Keys that don't exist in the
          # incoming
          # pod labels will be ignored. The default value is empty.
          # The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
          # Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
          # This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature
          # gate (enabled by default).
          # Type: array of string
          mismatchLabelKeys: {{ $v.mismatchLabelKeys }}

          # Section: namespaceSelector
          # Required: false
          # Description: A label query over the set of namespaces that the term applies to.
          # The term is applied to the union of the namespaces selected by this field
          # and the ones listed in the namespaces field.
          # null selector and null or empty namespaces list means "this pod's namespace".
          # An empty selector ({}) matches all namespaces.
          # Type: object
          {{- if eq (kindOf $v.namespaceSelector) "map" }}
          namespaceSelector: 

            # Section: matchExpressions
            # Required: false
            # Description: matchExpressions is a list of label selector requirements. The
            # requirements are ANDed.
            # Type: array of object
            {{- if eq (kindOf $v.namespaceSelector.matchExpressions) "array" }}
            matchExpressions:
            {{- range $v := $v.namespaceSelector.matchExpressions }}
            - 
              # Section: key
              # Required: true
              # Description: key is the label key that the selector applies to.
              # Type: string
              key: {{ required "A valid $v.key entry required!" $v.key | quote }}

              # Section: operator
              # Required: true
              # Description: operator represents a key's relationship to a set of values.
              # Valid operators are In, NotIn, Exists and DoesNotExist.
              # Type: string
              operator: {{ required "A valid $v.operator entry required!" $v.operator | quote }}

              # Section: values
              # Required: false
              # Description: values is an array of string values. If the operator is In or
              # NotIn,
              # the values array must be non-empty. If the operator is Exists or DoesNotExist,
              # the values array must be empty. This array is replaced during a strategic
              # merge patch.
              # Type: array of string
              values: {{ $v.values }}
            {{- end }}
            {{- end }}

            # Section: matchLabels
            # Required: false
            # Description: matchLabels is a map of {key,value} pairs. A single {key,value} in
            # the matchLabels
            # map is equivalent to an element of matchExpressions, whose key field is "key",
            # the
            # operator is "In", and the values array contains only "value". The requirements
            # are ANDed.
            # Type: object
            {{- if eq (kindOf $v.namespaceSelector.matchLabels) "map" }}
            # Sub-Type: map[string]string
            {{- if eq (kindOf $v.namespaceSelector.matchLabels) "map" }}
            matchLabels: {{ toYaml $v.namespaceSelector.matchLabels | nindent 14 }}
            {{- end }}
            {{- end }}
          {{- end }}

          # Section: namespaces
          # Required: false
          # Description: namespaces specifies a static list of namespace names that the term
          # applies to.
          # The term is applied to the union of the namespaces listed in this field
          # and the ones selected by namespaceSelector.
          # null or empty namespaces list and null namespaceSelector means "this pod's
          # namespace".
          # Type: array of string
          namespaces: {{ $v.namespaces }}

          # Section: topologyKey
          # Required: true
          # Description: This pod should be co-located (affinity) or not co-located
          # (anti-affinity) with the pods matching
          # the labelSelector in the specified namespaces, where co-located is defined as
          # running on a node
          # whose value of the label with key topologyKey matches that of any node on which
          # any of the
          # selected pods is running.
          # Empty topologyKey is not allowed.
          # Type: string
          topologyKey: {{ required "A valid $v.topologyKey entry required!" $v.topologyKey | quote }}
        {{- end }}
        {{- end }}
      {{- end }}
    {{- end }}

    # Section: annotations
    # Required: false
    # Description: Annotations - Annotations labels to be applied to the Statefulset
    # DB pods.
    # Type: object
    {{- if eq (kindOf .Values.annotations) "map" }}
    # Sub-Type: map[string]string
    {{- if eq (kindOf .Values.annotations) "map" }}
    annotations: {{ toYaml .Values.annotations | nindent 6 }}
    {{- end }}
    {{- end }}

    # Section: dedicatedSaaS
    # Required: false
    # Description: Identify if DedicatedSaaS environment or not.
    # Type: boolean
    # Default: false
    dedicatedSaaS: {{ if not (quote .Values.dedicatedSaaS | empty) }}{{ .Values.dedicatedSaaS }}{{ else }}false{{ end }}

    # Section: deploymentInfo
    # Required: false
    # Description: DeploymentInfo corresponds to various details related to the
    # deployment
    # Type: string
    {{- if eq (kindOf .Values.deploymentInfo) "string" }}
    deploymentInfo: {{ .Values.deploymentInfo }}
    {{- end }}

    # Section: executeSqlLimit
    # Required: false
    # Description: The maximum number of rows that a SQL query is allowed to return
    # Type: integer
    # Default: 10000
    executeSqlLimit: {{ if not (quote .Values.executeSqlLimit | empty) }}{{ .Values.executeSqlLimit }}{{ else }}10000{{ end }}

    # Section: fqdn
    # Required: true
    # Description: The fully qualified domain name of the cluster.  Used on the
    # Ingress records for any exposed services.
    # Type: string
    fqdn: {{ required "A valid .Values.fqdn entry required!" .Values.fqdn | quote }}

    # Section: freeSaaS
    # Required: false
    # Description: Identify if FreeSaaS environment or not.
    # Type: boolean
    # Default: false
    freeSaaS: {{ if not (quote .Values.freeSaaS | empty) }}{{ .Values.freeSaaS }}{{ else }}false{{ end }}

    # Section: image
    # Required: false
    # Description: Image corresponds to the workbench image
    # Type: string
    # Default: kinetica/workbench:latest
    image: {{ .Values.wbRegistryRepositoryTag.registry }}/{{ .Values.wbRegistryRepositoryTag.repository }}:{{ .Values.wbRegistryRepositoryTag.tag }}
    # Section: ingressController
    # Required: false
    # Description: Specify the type of ingress controller to use on the Workbench
    # Type: string
    # Default: nginx
    ingressController: {{ if not (quote .Values.ingressController | empty) }}{{ .Values.ingressController }}{{ else }}"nginx"{{ end }}

    # Section: labels
    # Required: false
    # Description: Labels - Pod labels to be applied to the Statefulset DB pods.
    # Type: object
    {{- if eq (kindOf .Values.labels) "map" }}
    # Sub-Type: map[string]string
    {{- if eq (kindOf .Values.labels) "map" }}
    labels: {{ toYaml .Values.labels | nindent 6 }}
    {{- end }}
    {{- end }}

    # Section: letsEncrypt
    # Required: false
    # Description: The Ingress Endpoint that GAdmin will be running on.
    # Type: object
    {{- if eq (kindOf .Values.letsEncrypt) "map" }}
    letsEncrypt: 

      # Section: enabled
      # Required: false
      # Description: Enable LetsEncrypt for Certificate generation.
      # Type: boolean
      # Default: false
      enabled: {{ if not (quote .Values.letsEncrypt.enabled | empty) }}{{ .Values.letsEncrypt.enabled }}{{ else }}false{{ end }}

      # Section: environment
      # Required: false
      # Description: 
      # Type: string
      # Default: letsencrypt-staging
      environment: {{ if not (quote .Values.letsEncrypt.environment | empty) }}{{ .Values.letsEncrypt.environment }}{{ else }}"letsencrypt-staging"{{ end }}
    {{- end }}

    # Section: nodeSelector
    # Required: false
    # Description: NodeSelector - NodeSelector to be applied to the DB Pods
    # Type: object
    {{- if eq (kindOf .Values.nodeSelector) "map" }}
    # Sub-Type: map[string]string
    {{- if eq (kindOf .Values.nodeSelector) "map" }}
    nodeSelector: {{ toYaml .Values.nodeSelector | nindent 6 }}
    {{- end }}
    {{- end }}

    # Section: storageClass
    # Required: false
    # Description: Specify the storage class to use on the Workbench stateful set
    # Type: string
    {{- if eq (kindOf .Values.storageClass) "string" }}
    storageClass: {{ .Values.storageClass }}
    {{- end }}

    # Section: useHttps
    # Required: true
    # Description: When not using LetsEncrypt, whether the workbench is secured behind
    # SSL or not.
    # Type: boolean
    # Default: false
    useHttps: {{ if not (quote .Values.useHttps | empty) }}{{ .Values.useHttps }}{{ else }}false{{ end }}

    # Section: userIdleTimeout
    # Required: false
    # Description: The number of minutes that a user connection remains alive without
    # activity
    # Type: integer
    # Default: 60
    userIdleTimeout: {{ if not (quote .Values.userIdleTimeout | empty) }}{{ .Values.userIdleTimeout }}{{ else }}60{{ end }}
