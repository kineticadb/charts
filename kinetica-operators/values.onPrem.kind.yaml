
# environment refers to either of "onPrem" "saas" "marketPlace"
# "saas" "marketPlace" are used by Kinetica only
# for a customer trying to install the chart on his own wherever, it should be onPrem
environment: "onPrem"
# onPrem Providers: "k3s" "kind" "eks" "aks" "other"
# saas Providers: eks
# marketPlace Providers: aks eks
provider: kind

# clusterName and clusterRegion are used only when environment is marketPlace and provider is eks
# its used in the monitoring related configmaps
clusterName: ""
clusterRegion: ""

kubeRbacProxy:
    image:
      repository: "quay.io/brancz/kube-rbac-proxy"
      tag: "v0.14.2"

# kube-state-metrics	Kubernetes client-go Version
# v2.6.0	                v1.24
# v2.7.0	                v1.25
# v2.8.2	                v1.26
# v2.9.2	                v1.26
# v2.10.0	                v1.27

kubeStateMetrics:
  install: false
  image:
    repository: "registry.k8s.io/kube-state-metrics/kube-state-metrics"
    tag: "v2.10.1"
otelCollector:
  install: true
  image:
    repository: "otel/opentelemetry-collector-contrib"
    tag: "0.89.0"
# cloudwatchAgent and fluentBit are used only when environment is marketPlace and provider is eks
cloudwatchAgent:
  image:
    repository: "public.ecr.aws/cloudwatch-agent/cloudwatch-agent"
    tag: "1.247350.0b251814"
fluentBit:
  image:
    repository: "public.ecr.aws/aws-observability/aws-for-fluent-bit"
    tag: "2.25.0"


wbOperator:
  install: true
  image:
    repository: "REPLACEMEREGISTRY/workbench-operator"
    tag: "REPLACEMETAG-operator"
    digest: ""
dbOperator:
  install: true
  # optional: aadpodidbinding is required when environment is marketPlace and provider is aks
  aadpodidbinding: ""
  image:
    repository: "REPLACEMEREGISTRY/kinetica-k8s-operator"
    tag: "REPLACEMETAG-operator"
    digest: ""

nodeSelector: {}
tolerations: []
affinity: {}

gpuOperator:
  install: false
  
certManager:
  install: true
"cert-manager":
  installCRDs: 'true' 
  namespace: kinetica-system

ingressNginx:
  install: true
"ingress-nginx":
  defaultBackend:
    enabled: true
    image:
      repository: docker.io/kineticadevcloud/kinetica-default-backend
      tag: v0.0.1
      digest: "" 
    extraEnvs:
      - name: DEBUG
        value: "false"
  tcp:
    1389: "gpudb/openldap:1389"
    4317: "kinetica-system/otel-collector:4317"
    5432: "gpudb/kinetica-sample-rank0-service:5432"
    9002: "gpudb/kinetica-sample-rank0-service:9002"
    9191: "gpudb/kinetica-sample-rank0-service:9191"
    9300: "gpudb/kinetica-sample-rank0-service:9300"
  controller:
    hostPort:
      enabled: true
    allowSnippetAnnotations: true
    hostNetwork: true
    terminationGracePeriodSeconds: 0
    service:
      type: "NodePort"            
    extraArgs:
      publish-status-address: "localhost"
    publishService:
      enabled: false
    nodeSelector:
      ingress-ready: "true"
    tolerations:
      - key: "node-role.kubernetes.io/master"
        operator: "Equal"
        effect: "NoSchedule"
      - effect: NoSchedule
        key: node-role.kubernetes.io/control-plane
        operator: Equal
    admissionWebhooks:
      enabled: true
      patch:
        enabled: true  
        image:
          repository: k8s.gcr.io/ingress-nginx/kube-webhook-certgen
          tag: v1.1.1
          digest: ""
openldap:
  namespace: "gpudb"
  fullnameOverride: "openldap"
  global:
    ldapPort: 1389
  env:
    LDAP_BACKEND: "mdb"
    LDAP_ORGANISATION: "Kinetica DB Inc."
    LDAP_DOMAIN: "kinetica.com"
    LDAP_LOG_LEVEL: "128"
    LDAP_ENABLE_TLS: "no"
  affinity: {}
  podAntiAffinity: {}
  livenessProbe:
    enabled: true
  readinessProbe:
    enabled: true
  startupProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 30
  persistence:
    enabled: false
    existingClaim: ""
    accessMode: "ReadWriteOnce"
    size: 1Mi
    storageClass: "standard"
db:
  # do you want to provision a database
  create: true
  name: kinetica-sample
  namespace: gpudb
  debug: false
  autoSuspend:
    enabled: false
  # provide a boolean to say whether its payasyougo or not
  payAsYouGo: true
  # for environment onPrem, provide the following
  deploymentType:
    type: on_prem
    region: on_prem_local
  # awsConfig is applicable only for marketplace on aws
  awsConfig:
    clusterName: ""
    marketplaceApp:
      productCode: ""
      publicKeyVersion: 1
  # azureConfig is applicable only for marketplace on azure
  azureConfig:
    managedApp:
      planId: ""
      resourceUri: ""
    appInsights:
      key: ""
  
  hostManagerMonitor:
    image:
      repository: docker.io/kineticadevcloud/kinetica-k8s-monitor
      tag: v7.1.9-23.base-1
  # you may use nginx if you want the operator to create the nginx records
  # if you want to manage your own ingress controller/gateway api, provide "none"
  # TODO: As of now, if you want the operator to create nginx records, do the following
  # 1. first install nginx sub chart by providing the release namespace as nginx
  # helm -n nginx install nginx charts/kinetica-operators/charts/ingress-nginx --values values
  # you can refer to the correct ingress-ngix values in the corresponding values file in the operators values files
  # This is needed now as the operator as of now, looks for its nginx in the nginx namespace
  # if you enable ingress-nginx and install the operators, it will install all in the kinetica-system namespace
  ingressController: nginx
  ldap:
    baseDN: dc=kinetica,dc=com
    bindDN: cn=admin,dc=kinetica,dc=com
    host: openldap
    isInLocalK8S: true
    isLDAPS: false
    namespace: gpudb
    port: 1389
  supportingImages:
        busybox:
          image:
            repository: docker.io/busybox
            tag: 1.29.2
        socat:
          image:
            repository: docker.io/alpine/socat
            tag: 1.7.4.1-r2
  stats:
    isEnabled: false
  gadmin:
    isEnabled: true
  reveal:
    isEnabled: true
  gpudbCluster:
    # this applies if you have labelled node pools for compute
    hasPools: false
    clusterSize:
      tshirtSize: XS
      tshirtType: SmallCPU
    ranksPerNode: 1
    replicas: 1
    # provide an fqdn if you want to use a custom fqdn
    fqdn: "local.kinetica"
    letsEncrypt:
      enabled: false  
      # only allowed values are staging and production
      environment: "staging"
    # you may either use "payg" or a valid license
    license: "payg"
    gpuAcceleration: false
    image:
      cuda:
        image:
          repository: docker.io/kinetica/kinetica-k8s-cuda
          tag: v7.1.9.23-ga
      standard:
        image:
          repository: docker.io/kinetica/kinetica-k8s-cpu
          tag:  v7.1.9.23-ga
    metricsRegistryRepositoryTag:
      image:
        repository: amazon/aws-for-fluent-bit
        tag: 2.25.0
    config:
      postgresProxy:
         enablePostgresProxy: true
      kifs:
        enable: true
        mountPoint: /gpudb/kifs
      procs:
        enable: true
      textSearch:
        enableTextSearch: true
      tieredStorage:
        globalTier:
          colocateDisks: true
        # ramTier:
        #   default:
        #     limit: ""
        persistTier:
          default:
            limit: ""
            provisioner: "rancher.io/local-path"
            volumeClaim:
              spec:
                storageClassName: "standard"
        diskCacheTier:
          default:
            limit: 1Gi
            provisioner: "rancher.io/local-path"
            volumeClaim:
              spec:
                storageClassName: "standard"
        coldStorageTier:
          coldStorageType: "disk"
          coldStorageDisk:
            provisioner: "rancher.io/local-path"
            volumeClaim:
              spec:
                storageClassName: "standard"

dbAdminUser:
    create: true
    # allowed pattern "^(?:(?!^graph$|^admin$|^planner$|^[a-zA-Z0-9-]$).){5,10}$"
    name: "kadmin"
    # allowed pattern "^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[!@\\#$%^&*]).{12,}$"
    password: "Kinetica1234!"
dbWorkbench:
  create: true
  deploymentInfo: '{}'
  fqdn: "local.kinetica"
  letsEncrypt:
    enabled: false
    environment: "staging"
    
  image:
    repository: docker.io/kinetica/workbench
    tag: v7.1.9.23-ga

  